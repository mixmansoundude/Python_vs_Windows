name: Batch syntax/run check

on:
  workflow_dispatch: {}
  push:
    branches: ['**']      # run on every branch
  pull_request:
    branches: ['**']      # run for PRs targeting any branch

# Tight, least-privileged perms for the workflow GITHUB_TOKEN
permissions:
  contents: read
  actions: read
  pull-requests: write
  issues: write

jobs:
  check:
    runs-on: windows-latest

    # Optional noise reducer: cancel older runs for the same ref
    concurrency:
      group: batch-check-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - uses: actions/checkout@v4

      - name: Show environment
        shell: cmd
        run: |
          ver
          echo %COMSPEC%
          echo Workspace: %CD%
          git rev-parse HEAD
          dir /b /s

      # ===== New diagnostics: show harness with line numbers =====
      - name: Debug to show harness with line numbers
        if: always()
        shell: pwsh
        run: |
          Write-Host "HEAD: $env:GITHUB_SHA  Branch: $env:GITHUB_REF"
          if (Test-Path .\tests\harness.ps1) {
            $i = 0
            Get-Content .\tests\harness.ps1 | ForEach-Object { $i++; '{0,5}: {1}' -f $i, $_ }
            # Quick non-ASCII sniff (gremlins cause parse weirdness)
            $bytes = [System.IO.File]::ReadAllBytes('.\tests\harness.ps1')
            $hi = $bytes | Where-Object { $_ -gt 127 } | Select-Object -First 10
            if ($hi) { Write-Host "Non-ASCII bytes present: $($hi -join ', ')" } else { Write-Host "ASCII-only file." }
          } else {
            Write-Error "tests\\harness.ps1 not found in workspace"
          }

      # ===== New diagnostics: static parse via PowerShell AST =====
      - name: Static-parse harness (AST)
        if: always()
        shell: pwsh
        run: |
          if (Test-Path .\tests\harness.ps1) {
            $tokens = $null; $errors = $null
            [void][System.Management.Automation.Language.Parser]::ParseFile('.\tests\harness.ps1',[ref]$tokens,[ref]$errors)
            if ($errors) {
              Write-Host "::group::AST parse errors"
              foreach ($e in $errors) {
                "{0} at line {1}, col {2}" -f $e.Message, $e.Extent.StartLineNumber, $e.Extent.StartColumnNumber
                $ctx = Get-Content .\tests\harness.ps1
                $start = [Math]::Max($e.Extent.StartLineNumber-2,1)
                $end   = [Math]::Min($e.Extent.StartLineNumber+2,$ctx.Count)
                for ($n=$start; $n -le $end; $n++) { '{0,5}: {1}' -f $n, $ctx[$n-1] }
                ""
              }
              Write-Host "::endgroup::"
            } else {
              Write-Host "No AST parse errors in tests\\harness.ps1"
            }
          }

      - name: Run tests
        shell: cmd
        env:
          SCRIPT: run_tests.bat
        run: |
          setlocal EnableExtensions EnableDelayedExpansion
          echo === BEGIN %CD%\%SCRIPT% ===
          echo on
          call "%SCRIPT%"
          set RC=%errorlevel%
          @echo off
          exit /b %RC%

      - name: Find & print test logs (tail)
        if: always()
        shell: pwsh
        run: |
          $patterns = @('*.log','*install_log*.txt','~*.txt','*.out','*.ndjson')
          $files = @()
          foreach($p in $patterns){
            $files += Get-ChildItem -Path . -Recurse -Include $p -File -ErrorAction SilentlyContinue
          }
          # Also sweep the tests tree explicitly
          $files += Get-ChildItem -Path .\tests -Recurse -Include *.txt,*.log,*.ndjson -File -ErrorAction SilentlyContinue
          $files = $files | Sort-Object LastWriteTime -Descending -Unique
          if(-not $files){ Write-Host "No log files found."; exit 0 }
          foreach($f in $files){
            Write-Host "::group::LOG $($f.FullName)"
            Get-Content -Path $f.FullName -Tail 400
            Write-Host "::endgroup::"
          }

      - name: Upload test logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-logs
          path: |
            **/*.log
            **/*install_log*.txt
            **/~*.txt
            **/*.out
            **/*.ndjson
            tests/**/*.txt
            tests/**/*.log
            tests/**/*.ndjson
          if-no-files-found: warn
          retention-days: 14

      - name: Publish failure summary
        if: failure()
        shell: pwsh
        run: |
          $runUrl = "$env:GITHUB_SERVER_URL/$env:GITHUB_REPOSITORY/actions/runs/$env:GITHUB_RUN_ID"
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "# â CI failure: Batch syntax/run check"
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "Run: $runUrl`n"
          $patterns = @('*.log','*install_log*.txt','~*.txt','*.out','*.ndjson')
          $files = @()
          foreach ($p in $patterns) {
            $files += Get-ChildItem -Path . -Recurse -Include $p -File -ErrorAction SilentlyContinue
          }
          $files += Get-ChildItem -Path .\tests -Recurse -Include *.txt,*.log,*.ndjson -File -ErrorAction SilentlyContinue
          $files = $files | Sort-Object LastWriteTime -Descending -Unique
          if ($files -and $files.Count -gt 0) {
            $files | Select-Object -First 4 | ForEach-Object {
              Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "## Log: $($_.FullName)"
              Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value '```text'
              Get-Content -Path $_.FullName -Tail 120 | ForEach-Object { Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value $_ }
              Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value '```'
            }
          } else {
            Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "_No logs found_"
          }

      - name: Extract first failure (machine-readable + snippet)
        if: failure()
        shell: pwsh
        run: |
          $patterns = @('*.log','*install_log*.txt','~*.txt','*.out','*.ndjson')
          $files = @()
          foreach ($p in $patterns) {
            $files += Get-ChildItem -Path . -Recurse -Include $p -File -ErrorAction SilentlyContinue
          }
          $files += Get-ChildItem -Path .\tests -Recurse -Include *.txt,*.log,*.ndjson -File -ErrorAction SilentlyContinue
          $files = $files | Sort-Object LastWriteTime -Descending -Unique

          function FirstNonEmpty {
            param([object]$o,[string[]]$names)
            foreach ($n in $names) {
              if ($o.PSObject.Properties.Match($n)) {
                $v = $o.$n
                if ($null -ne $v -and "$v" -ne "") { return $v }
              }
            }
            return ""
          }

          function IsFail {
            param([object]$o)
            if (-not $o) { return $false }
            # Boolean styles
            if ($o.ok -is [bool]       -and -not $o.ok)       { return $true }
            if ($o.pass -is [bool]     -and -not $o.pass)     { return $true }
            if ($o.passed -is [bool]   -and -not $o.passed)   { return $true }
            if ($o.success -is [bool]  -and -not $o.success)  { return $true }
            # String styles
            $candidates = @($o.result,$o.status,$o.outcome,$o.level,$o.severity) | Where-Object { $_ }
            foreach ($v in $candidates) {
              if ($v -match '^(fail|error|fatal)$') { return $true }
            }
            return $false
          }

          $firstFail = $null
          $snippet = ""

          # Prefer NDJSON (structured). Examine a few freshest files first.
          $nd = $files | Where-Object { $_.Extension -eq '.ndjson' } | Select-Object -First 8
          foreach ($f in $nd) {
            $lineNo = 0
            Get-Content -Path $f.FullName | ForEach-Object {
              $lineNo++
              $raw = $_
              try { $o = $raw | ConvertFrom-Json -ErrorAction Stop } catch { $o = $null }
              if (IsFail $o) {
                $firstFail = [pscustomobject]@{
                  source  = $f.FullName
                  line    = FirstNonEmpty $o @('line','lineno','row')
                  file    = FirstNonEmpty $o @('file','path','target')
                  check   = FirstNonEmpty $o @('check','id','name','rule','test','key')
                  message = FirstNonEmpty $o @('message','msg','error','reason','note','details')
                }
                if (-not $firstFail.message) { $firstFail.message = $raw }
                if (-not $firstFail.line)    { $firstFail.line    = $lineNo }
                $snippet = (Get-Content -Path $f.FullName | Select-Object -Skip ([Math]::Max(0,$lineNo-3)) | Select-Object -First 10) -join "`n"
                break
              }
            }
            if ($firstFail) { break }
          }

          # Fallback: scan text tails for obvious error tokens
          if (-not $firstFail) {
            foreach ($f in $files) {
              $lines = Get-Content -Path $f.FullName -Tail 400
              $m = $lines | Select-String -Pattern '^(ERROR|FAIL|Failed|Exception|Traceback|ModuleNotFoundError).*' | Select-Object -First 1
              if ($m) {
                $firstFail = [pscustomobject]@{
                  source  = $f.FullName
                  line    = ""
                  file    = ""
                  check   = ""
                  message = $m.Line
                }
                $idx = ($lines | ForEach-Object { $_ }) .IndexOf($m.Line)
                $start = [Math]::Max(0,$idx-2); $count = 10
                $snippet = ($lines | Select-Object -Skip $start -First $count) -join "`n"
                break
              }
            }
          }

          if (-not $firstFail) {
            $firstFail = [pscustomobject]@{ source=""; line=""; file=""; check=""; message="(No failure fingerprint found. See run link.)" }
            $snippet = "Could not auto-fingerprint; inspect the run page."
          }

          # Write machine-readable JSON and snippet to files for the next step
          ($firstFail | ConvertTo-Json -Compress) | Out-File -FilePath first_failure.json -Encoding utf8 -NoNewline
          $snippet | Out-File -FilePath snippet.txt -Encoding utf8 -NoNewline

          # Also mirror into the Step Summary for human eyeballs
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "### First failure (machine-readable)"
          ($firstFail | ConvertTo-Json -Compress) | Add-Content -Path $env:GITHUB_STEP_SUMMARY
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "### First failure (snippet)"
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value '```text'
          Get-Content -Path snippet.txt | ForEach-Object { Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value $_ }
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value '```'

      - name: Comment failure summary on PR (with @codex)
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            const runUrl = `${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}`;
            const repoUrl = `${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}`;

            // Read summary + synthesized files
            let summary = fs.existsSync(process.env.GITHUB_STEP_SUMMARY) ? fs.readFileSync(process.env.GITHUB_STEP_SUMMARY, 'utf8') : '';
            let snippet = fs.existsSync('snippet.txt') ? fs.readFileSync('snippet.txt','utf8') : 'Could not auto-fingerprint; see run link.';
            let jf = fs.existsSync('first_failure.json') ? fs.readFileSync('first_failure.json','utf8') : '{"id":"first_failure","pass":false,"desc":"No fingerprint"}';

            // Find PR number (works for PR and push events)
            let prNumber = context.payload.pull_request?.number;
            if (!prNumber) {
              const branch = context.ref.replace('refs/heads/', '');
              const { data: prs } = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                head: `${context.repo.owner}:${branch}`,
                state: 'open'
              });
              if (prs.length) prNumber = prs[0].number;
            }

            if (!prNumber) {
              console.log('No open PR for this branch; skipping PR comment.');
              return;
            }

            const branch = context.payload.pull_request?.head?.ref ?? context.ref.replace('refs/heads/','');
            const runsUrl = `${repoUrl}/actions?query=branch%3A${encodeURIComponent(branch)}`;

            const body = [
              '### â CI failure: Batch syntax/run check',
              `Run: ${runUrl}`,
              '',
              '@codex',
              '',
              '**Top failure from the latest CI on this PR** (source of truth: Job Summary + failing step logs). Fix **only the first failing item** with the smallest possible change (file path + exact diff/one-line replacement).',
              '',
              'First failure (snippet):',
              '```',
              snippet,
              '```',
              '',
              'Machine-readable:',
              '```json',
              jf,
              '```',
              '',
              'Please commit directly to branch `' + branch + '` with:',
              '```\nfix(ci): address (#)\n```',
              '',
              'WAIT for CI to finish; if it still fails, repeat on the new top failure. **Stop** if the same top error repeats twice.',
              '',
              'Links:',
              `â¢ Run: ${runUrl}`,
              `â¢ All runs for this branch: ${runsUrl}`
            ].join('\n');

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body
            });
