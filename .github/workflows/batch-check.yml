name: Batch syntax/run check

on:
  workflow_dispatch: {}
  push:
    branches: ['**']      # run on every branch
  pull_request:
    branches: ['**']      # run for PRs targeting any branch

# Minimum perms so the job can read Actions data and comment on PRs
permissions:
  contents: read
  actions: read
  pull-requests: write
  issues: write

jobs:
  check:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Show environment
        shell: cmd
        run: |
          ver
          echo %COMSPEC%
          echo Workspace: %CD%
          dir /b /s

      - name: Run tests
        shell: cmd
        env:
          SCRIPT: run_tests.bat
        run: |
          setlocal EnableExtensions EnableDelayedExpansion
          echo === BEGIN %CD%\%SCRIPT% ===
          echo on
          call "%SCRIPT%"
          set RC=%errorlevel%
          @echo off
          exit /b %RC%

      - name: Find & print test logs (tail)
        if: always()
        shell: pwsh
        run: |
          $patterns = @('*.log','*install_log*.txt','~*.txt','*.out','*.ndjson')
          $files = @()
          foreach($p in $patterns){
            $files += Get-ChildItem -Path . -Recurse -Include $p -File -ErrorAction SilentlyContinue
          }
          # Also sweep the tests tree explicitly
          $files += Get-ChildItem -Path .\tests -Recurse -Include *.txt,*.log,*.ndjson -File -ErrorAction SilentlyContinue
          $files = $files | Sort-Object LastWriteTime -Descending -Unique
          if(-not $files){ Write-Host "No log files found."; exit 0 }
          foreach($f in $files){
            Write-Host "::group::LOG $($f.FullName)"
            Get-Content -Path $f.FullName -Tail 400
            Write-Host "::endgroup::"
          }

      - name: Upload test logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-logs
          path: |
            **/*.log
            **/*install_log*.txt
            **/~*.txt
            **/*.out
            **/*.ndjson
            tests/**/*.txt
            tests/**/*.log
            tests/**/*.ndjson
          if-no-files-found: warn
          retention-days: 14

      - name: Publish failure summary
        if: failure()
        shell: pwsh
        run: |
          $runUrl = "$env:GITHUB_SERVER_URL/$env:GITHUB_REPOSITORY/actions/runs/$env:GITHUB_RUN_ID"
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "# ❌ CI failure: Batch syntax/run check"
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "Run: $runUrl`n"
          $patterns = @('*.log','*install_log*.txt','~*.txt','*.out','*.ndjson')
          $files = @()
          foreach ($p in $patterns) {
            $files += Get-ChildItem -Path . -Recurse -Include $p -File -ErrorAction SilentlyContinue
          }
          $files += Get-ChildItem -Path .\tests -Recurse -Include *.txt,*.log,*.ndjson -File -ErrorAction SilentlyContinue
          $files = $files | Sort-Object LastWriteTime -Descending -Unique
          if ($files -and $files.Count -gt 0) {
            $files | Select-Object -First 4 | ForEach-Object {
              Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "## Log: $($_.FullName)"
              Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value '```text'
              Get-Content -Path $_.FullName -Tail 120 | ForEach-Object { Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value $_ }
              Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value '```'
            }
          } else {
            Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "_No logs found_"
          }

      - name: Comment failure summary on PR
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const runUrl = `${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}`;
            let body = fs.readFileSync(process.env.GITHUB_STEP_SUMMARY, 'utf8');
            body = `### ❌ CI failure: Batch syntax/run check\nRun: ${runUrl}\n\n` + body;

            // Find PR number (works for PR and push events)
            let prNumber = context.payload.pull_request?.number;
            if (!prNumber) {
              const branch = context.ref.replace('refs/heads/', '');
              const { data: prs } = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                head: `${context.repo.owner}:${branch}`,
                state: 'open'
              });
              if (prs.length) prNumber = prs[0].number;
            }

            if (prNumber) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body
              });
            } else {
              console.log('No open PR for this branch; skipping PR comment.');
            }
