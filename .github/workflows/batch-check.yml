name: Batch syntax/run check

on:
  workflow_dispatch: {}
  push:
    branches: ['**']      # run on every branch
  pull_request:
    branches: ['**']      # run for PRs targeting any branch

# Tight, least-privileged perms for the workflow GITHUB_TOKEN
permissions:
  contents: read
  actions: read
  pull-requests: write
  issues: write

jobs:
  check:
    runs-on: windows-latest

    # Optional noise reducer: cancel older runs for the same ref
    concurrency:
      group: batch-check-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - uses: actions/checkout@v4

      - name: Show environment
        shell: cmd
        run: |
          ver
          echo %COMSPEC%
          echo Workspace: %CD%
          git rev-parse HEAD
          dir /b /s

      # ===== New diagnostics: show harness with line numbers =====
      - name: Debug to show harness with line numbers
        if: always()
        shell: pwsh
        run: |
          Write-Host "HEAD: $env:GITHUB_SHA  Branch: $env:GITHUB_REF"
          if (Test-Path .\tests\harness.ps1) {
            $i = 0
            Get-Content .\tests\harness.ps1 | ForEach-Object { $i++; '{0,5}: {1}' -f $i, $_ }
            # Quick non-ASCII sniff (gremlins cause parse weirdness)
            $bytes = [System.IO.File]::ReadAllBytes('.\tests\harness.ps1')
            $hi = $bytes | Where-Object { $_ -gt 127 } | Select-Object -First 10
            if ($hi) { Write-Host "Non-ASCII bytes present: $($hi -join ', ')" } else { Write-Host "ASCII-only file." }
          } else {
            Write-Error "tests\\harness.ps1 not found in workspace"
          }

      # ===== New diagnostics: static parse via PowerShell AST =====
      - name: Static-parse harness (AST)
        if: always()
        shell: pwsh
        run: |
          if (Test-Path .\tests\harness.ps1) {
            $tokens = $null; $errors = $null
            [void][System.Management.Automation.Language.Parser]::ParseFile('.\tests\harness.ps1',[ref]$tokens,[ref]$errors)
            if ($errors) {
              Write-Host "::group::AST parse errors"
              foreach ($e in $errors) {
                "{0} at line {1}, col {2}" -f $e.Message, $e.Extent.StartLineNumber, $e.Extent.StartColumnNumber
                $ctx = Get-Content .\tests\harness.ps1
                $start = [Math]::Max($e.Extent.StartLineNumber-2,1)
                $end   = [Math]::Min($e.Extent.StartLineNumber+2,$ctx.Count)
                for ($n=$start; $n -le $end; $n++) { '{0,5}: {1}' -f $n, $ctx[$n-1] }
                ""
              }
              Write-Host "::endgroup::"
            } else {
              Write-Host "No AST parse errors in tests\\harness.ps1"
            }
          }

      - name: Run tests
        shell: cmd
        env:
          SCRIPT: run_tests.bat
        run: |
          setlocal EnableExtensions EnableDelayedExpansion
          echo === BEGIN %CD%\%SCRIPT% ===
          echo on
          call "%SCRIPT%"
          set RC=%errorlevel%
          @echo off
          exit /b %RC%

      - name: Find & print test logs (tail)
        if: always()
        shell: pwsh
        run: |
          $patterns = @('*.log','*install_log*.txt','~*.txt','*.out','*.ndjson')
          $files = @()
          foreach($p in $patterns){
            $files += Get-ChildItem -Path . -Recurse -Include $p -File -ErrorAction SilentlyContinue
          }
          # Also sweep the tests tree explicitly
          $files += Get-ChildItem -Path .\tests -Recurse -Include *.txt,*.log,*.ndjson -File -ErrorAction SilentlyContinue
          $files = $files | Sort-Object LastWriteTime -Descending -Unique
          if(-not $files){ Write-Host "No log files found."; exit 0 }
          foreach($f in $files){
            Write-Host "::group::LOG $($f.FullName)"
            Get-Content -Path $f.FullName -Tail 400
            Write-Host "::endgroup::"
          }

      - name: Upload test logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-logs
          path: |
            **/*.log
            **/*install_log*.txt
            **/~*.txt
            **/*.out
            **/*.ndjson
            tests/**/*.txt
            tests/**/*.log
            tests/**/*.ndjson
          if-no-files-found: warn
          retention-days: 14

      - name: Publish failure summary
        if: failure()
        shell: pwsh
        run: |
          $runUrl = "$env:GITHUB_SERVER_URL/$env:GITHUB_REPOSITORY/actions/runs/$env:GITHUB_RUN_ID"
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "# ❌ CI failure: Batch syntax/run check"
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "Run: $runUrl`n"
          $patterns = @('*.log','*install_log*.txt','~*.txt','*.out','*.ndjson')
          $files = @()
          foreach ($p in $patterns) {
            $files += Get-ChildItem -Path . -Recurse -Include $p -File -ErrorAction SilentlyContinue
          }
          $files += Get-ChildItem -Path .\tests -Recurse -Include *.txt,*.log,*.ndjson -File -ErrorAction SilentlyContinue
          $files = $files | Sort-Object LastWriteTime -Descending -Unique
          if ($files -and $files.Count -gt 0) {
            $files | Select-Object -First 4 | ForEach-Object {
              Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "## Log: $($_.FullName)"
              Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value '```text'
              Get-Content -Path $_.FullName -Tail 120 | ForEach-Object { Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value $_ }
              Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value '```'
            }
          } else {
            Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "_No logs found_"
          }

      - name: Extract first failure (machine-readable)
        if: failure()
        shell: pwsh
        run: |
          $patterns = @('*.log','*install_log*.txt','~*.txt','*.out','*.ndjson')
          $files = @()
          foreach ($p in $patterns) {
            $files += Get-ChildItem -Path . -Recurse -Include $p -File -ErrorAction SilentlyContinue
          }
          $files += Get-ChildItem -Path .\tests -Recurse -Include *.txt,*.log,*.ndjson -File -ErrorAction SilentlyContinue
          $files = $files | Sort-Object LastWriteTime -Descending -Unique

          $firstFail = $null
          $isFail = {
            param($o)
            if (-not $o) { return $false }
            # boolean shapes
            if ($o.ok -is [bool] -and -not $o.ok) { return $true }
            if ($o.pass -is [bool] -and -not $o.pass) { return $true }
            if ($o.passed -is [bool] -and -not $o.passed) { return $true }
            if ($o.success -is [bool] -and -not $o.success) { return $true }
            # string shapes
            $v = ($o.result,$o.status,$o.outcome,$o.level) -ne $null | Where-Object { $_ } | Select-Object -First 1
            if ($v -and ($v -match '^(fail|error)$')) { return $true }
            return $false
          }

          # Prefer NDJSON (structured)
          $nd = $files | Where-Object { $_.Extension -eq '.ndjson' } | Select-Object -First 5
          foreach ($f in $nd) {
            Get-Content $f.FullName | ForEach-Object {
              try { $o = $_ | ConvertFrom-Json -ErrorAction Stop } catch { $o = $null }
              if (& $isFail $o) {
                $firstFail = [pscustomobject]@{
                  check   = $o.check   ? $o.check   : ($o.name   ? $o.name   : "")
                  file    = $o.file    ? $o.file    : ($o.path   ? $o.path   : "")
                  line    = $o.line    ? $o.line    : ($o.lineno ? $o.lineno : "")
                  message = $o.message ? $o.message : ($o.error  ? $o.error  : ($o.reason ? $o.reason : ""))
                  source  = $f.FullName
                }
                break
              }
            }
            if ($firstFail) { break }
          }

          # Fallback: scan text tails for obvious error tokens
          if (-not $firstFail) {
            foreach ($f in $files) {
              $lines = Get-Content -Path $f.FullName -Tail 400
              $m = $lines | Select-String -Pattern '^(ERROR|FAIL|Failed|Exception|Traceback|ModuleNotFoundError).*' | Select-Object -First 1
              if ($m) {
                $firstFail = [pscustomobject]@{
                  check   = ""
                  file    = $f.FullName
                  line    = ""
                  message = $m.Line
                  source  = $f.FullName
                }
                break
              }
            }
          }

          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "### First failure (machine-readable)"
          if ($firstFail) {
            ($firstFail | ConvertTo-Json -Compress) | Add-Content -Path $env:GITHUB_STEP_SUMMARY
          } else {
            Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "_No failure fingerprint found_"
          }

      - name: Comment failure summary on PR
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const runUrl = `${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}`;
            let body = fs.readFileSync(process.env.GITHUB_STEP_SUMMARY, 'utf8');
            body = `### ❌ CI failure: Batch syntax/run check\nRun: ${runUrl}\n\n` + body;

            // Find PR number (works for PR and push events)
            let prNumber = context.payload.pull_request?.number;
            if (!prNumber) {
              const branch = context.ref.replace('refs/heads/', '');
              const { data: prs } = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                head: `${context.repo.owner}:${branch}`,
                state: 'open'
              });
              if (prs.length) prNumber = prs[0].number;
            }

            if (prNumber) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body
              });
            } else {
              console.log('No open PR for this branch; skipping PR comment.');
            }
